Kafka 设置最佳实践
1. 服务器端配置 (Server Config)
1.1 核心配置参数
Properties
# 基础配置
broker.id=1  # 每个broker唯一ID
listeners=PLAINTEXT://0.0.0.0:9092
advertised.listeners=PLAINTEXT://your-server-ip:9092
log.dirs=/var/kafka-logs  # 建议使用多个目录提高IO性能

# 数据保留策略
log.retention.hours=168  # 7天，根据业务需求调整
log.retention.bytes=1073741824  # 1GB，可选配置
log.segment.bytes=1073741824  # 1GB segment大小
1.2 性能优化配置
Properties
# 网络和IO优化
num.network.threads=8  # 网络线程数，通常设为CPU核数
num.io.threads=8  # IO线程数，通常设为CPU核数
socket.send.buffer.bytes=102400  # 发送缓冲区
socket.receive.buffer.bytes=102400  # 接收缓冲区
socket.request.max.bytes=104857600  # 最大请求大小

# 副本配置
default.replication.factor=3  # 默认副本数
min.insync.replicas=2  # 最小同步副本数
2. 生产者配置 (Producer Config)
2.1 可靠性配置
Java
Properties props = new Properties();
props.put("bootstrap.servers", "localhost:9092");
props.put("key.serializer", "org.apache.kafka.common.serialization.StringSerializer");
props.put("value.serializer", "org.apache.kafka.common.serialization.StringSerializer");

// 可靠性设置
props.put("acks", "all");  // 等待所有副本确认
props.put("retries", Integer.MAX_VALUE);  // 重试次数
props.put("max.in.flight.requests.per.connection", 5);  // 允许的未确认请求数
props.put("enable.idempotence", true);  // 启用幂等性
2.2 性能优化配置
Java
// 批处理优化
props.put("batch.size", 16384);  // 批处理大小 16KB
props.put("linger.ms", 10);  // 等待时间，平衡延迟和吞吐量
props.put("buffer.memory", 33554432);  // 缓冲区大小 32MB

// 压缩设置
props.put("compression.type", "snappy");  // 推荐snappy或lz4
3. 消费者配置 (Consumer Config)
3.1 基础配置
Java
Properties props = new Properties();
props.put("bootstrap.servers", "localhost:9092");
props.put("group.id", "my-consumer-group");
props.put("key.deserializer", "org.apache.kafka.common.serialization.StringDeserializer");
props.put("value.deserializer", "org.apache.kafka.common.serialization.StringDeserializer");

// 消费策略
props.put("auto.offset.reset", "earliest");  // latest/earliest/none
props.put("enable.auto.commit", "false");  // 手动提交offset
props.put("max.poll.records", 500);  // 单次拉取记录数
3.2 性能和可靠性
Java
// 心跳和会话配置
props.put("session.timeout.ms", "30000");  // 会话超时
props.put("heartbeat.interval.ms", "10000");  // 心跳间隔
props.put("max.poll.interval.ms", "300000");  // 最大poll间隔

// 预取配置
props.put("fetch.min.bytes", 1024);  # 最小拉取字节数
props.put("fetch.max.wait.ms", 500);  # 最大等待时间
4. 集群配置最佳实践
4.1 ZooKeeper配置
Properties
# zookeeper.properties
tickTime=2000
dataDir=/var/zookeeper
clientPort=2181
initLimit=5
syncLimit=2

# 集群配置（至少3个节点）
server.1=zk1:2888:3888
server.2=zk2:2888:3888
server.3=zk3:2888:3888
4.2 主题配置策略
Bash
# 创建主题的最佳实践
kafka-topics.sh --create \
  --topic my-topic \
  --bootstrap-server localhost:9092 \
  --partitions 12 \  # 分区数建议为消费者数的倍数
  --replication-factor 3 \  # 副本数
  --config min.insync.replicas=2 \
  --config retention.ms=604800000  # 7天保留期
5. 硬件和系统优化
5.1 硬件配置建议
Yaml
# 推荐硬件配置
CPU: 8-16核心
内存: 32-64GB
存储: 
  - OS: SSD
  - Kafka日志: 多个独立磁盘（RAID 10）
网络: 千兆以上网络
5.2 操作系统优化
Bash
# Linux系统参数优化
echo 'vm.swappiness=1' >> /etc/sysctl.conf
echo 'vm.dirty_ratio=80' >> /etc/sysctl.conf
echo 'vm.dirty_background_ratio=5' >> /etc/sysctl.conf
echo 'net.core.rmem_max=134217728' >> /etc/sysctl.conf
echo 'net.core.wmem_max=134217728' >> /etc/sysctl.conf

# 文件描述符限制
echo '* soft nofile 65536' >> /etc/security/limits.conf
echo '* hard nofile 65536' >> /etc/security/limits.conf
6. 监控和维护
6.1 关键监控指标
Bash
# 重要监控指标
- Broker CPU/内存/磁盘使用率
- 网络IO
- Under-replicated partitions
- Leader election rate
- Request rate and latency
- Consumer lag
- Log size and retention
6.2 日志配置
Properties
# log4j.properties
log4j.rootLogger=INFO, kafkaAppender
log4j.appender.kafkaAppender=org.apache.log4j.DailyRollingFileAppender
log4j.appender.kafkaAppender.DatePattern='.'yyyy-MM-dd-HH
log4j.appender.kafkaAppender.File=${kafka.logs.dir}/server.log
log4j.appender.kafkaAppender.layout=org.apache.log4j.PatternLayout
log4j.appender.kafkaAppender.layout.ConversionPattern=[%d] %p %m (%c)%n
7. 安全配置
7.1 SSL配置
Properties
# server.properties
listeners=SSL://kafka1:9093
security.inter.broker.protocol=SSL
ssl.keystore.location=/var/private/ssl/server.keystore.jks
ssl.keystore.password=your-password
ssl.key.password=your-password
ssl.truststore.location=/var/private/ssl/server.truststore.jks
ssl.truststore.password=your-password
7.2 SASL认证
Properties
# SASL/PLAIN配置
security.inter.broker.protocol=SASL_SSL
sasl.mechanism.inter.broker.protocol=PLAIN
sasl.enabled.mechanisms=PLAIN
8. 容量规划
8.1 分区数量计算
Code
建议分区数 = max(消费者并发数, 目标吞吐量/单分区吞吐量)

例如：
- 目标吞吐量：100MB/s
- 单分区吞吐量：10MB/s
- 消费者数：8
建议分区数 = max(8, 100/10) = 10
8.2 存储容量规划
Code
存储需求 = 每日数据量 × 保留天数 × 副本数 × 1.2(预留空间)

例如：
- 每日数据量：100GB
- 保留7天
- 副本数：3
存储需求 = 100 × 7 × 3 × 1.2 = 2520GB
9. 常见问题和解决方案
9.1 性能问题
Bash
# 检查Under-replicated partitions
kafka-topics.sh --describe --bootstrap-server localhost:9092 --under-replicated-partitions

# 检查消费者延迟
kafka-consumer-groups.sh --bootstrap-server localhost:9092 --describe --group my-group
9.2 故障恢复
Bash
# 重启broker的安全步骤
1. 停止应用程序写入
2. 等待副本同步完成
3. 优雅关闭broker
4. 检查日志完整性
5. 重启broker
6. 验证集群状态
7. 恢复应用程序写入
这些最佳实践应该根据具体的业务需求、硬件环境和性能要求进行调整。建议在生产环境部署前进行充分的压力测试和性能调优。
